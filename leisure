#!/bin/sh
# Author: Jacob Niemeir <nniemeir@protonmail.com>
# Consolidate media library browsing using fzf

LEISURE_VERSION="2.2"

SUPPORTED_RUNNERS="BlastEm\nbsnes\nDeSmuME\nDolphin\nFlycast\nHeroic\nLutris\nmGBA\nNestopia\nPCSX2\nPPSSPP\nRPCS3\nSteam"

main() {
	command -v fzf >/dev/null 2>&1 || {
		echo >&2 "Error: fzf not found"
		exit 1
	}

	config_dir="$HOME/.config/leisure/"
	disable_previews=0

	case "$TERM" in
	*kitty*) ;;
	*) disable_previews=1 ;;
	esac

	process_args "$@"

	games_csv_path="$config_dir/games.csv"

	if ! [ -f "$games_csv_path" ]; then
		echo "games.csv not found."
		exit 1
	fi

	source "$config_dir/paths.conf" || {
		echo "Error: No configuration file found."
		exit 1
	}

	prompt_media_type

	exit 0
}

process_args() {
	while getopts "c:hnv" flag; do
		case $flag in
		c)
			config_dir="$OPTARG"
			;;
		h)
			echo "Usage: leisure [options]"
			echo "Options:"
			echo "  -c <directory>          Specify a configuration directory"
			echo "  -h                      Display this message"
			echo "  -n                      Disable preview images"
			echo "  -v                      Display version number"
			exit 0
			;;
		n)
			disable_previews=1
			;;
		v)
			echo "Leisure $LEISURE_VERSION"
			exit 0
			;;
		\?)
			exit 1
			;;
		esac
	done
}

fzf_prompt() {
	local library_files="$1"
	local show_selection="$2"

	export show_selection
	export config_dir

	local selection
	if [ "$disable_previews" -eq 1 ]; then
		selection=$(echo -e "$library_files" | xargs -I {} basename "{}" | sed 's/\.[^.]*$//' | fzf --height=80% --delimiter ';' --layout=reverse --cycle)
	else
		selection=$(echo -e "$library_files" | xargs -I {} basename "{}" | sed 's/\.[^.]*$//' | fzf --height=80% --delimiter ';' --layout=reverse --cycle --preview-window noborder --preview '
            local terminal_cols
			local terminal_rows
			local img_cols
			local img_rows
			local aspect_ratio
			local preview_file
			terminal_cols=$(tput cols)
			terminal_rows=$(tput lines)
            aspect_ratio=$((terminal_cols * 100 / terminal_rows))
			
            if [ $aspect_ratio -ge 150 ]; then
                img_cols=$((terminal_cols*50/100))
                img_rows=$((terminal_rows*80/100))
            elif [ $aspect_ratio -le 75 ]; then
                img_cols=$((terminal_cols*80/100))
                img_rows=$((terminal_rows*50/100))
            else
                img_cols=$((terminal_cols*80/100))
                img_rows=$((terminal_rows*80/100))
            fi

            if [ -z "$show_selection" ]; then
                preview_file=$config_dir/previews/{}.png
            else
                preview_file=$config_dir/previews/$show_selection.png
            fi
			
            if [ -f $preview_file ]; then
                kitty icat --clear --transfer-mode=stream --stdin=no --place=${img_cols}x${img_rows}@$(((cols-img_cols)/2))x$(((rows-img_rows)/2)) $preview_file
            else
                kitty icat --clear --transfer-mode=stream --stdin=no --place=${img_cols}x${img_rows}@$(((cols-img_cols)/2))x$(((rows-img_rows)/2)) $config_dir/previews/default.png
            fi
        ')
	fi
	echo "$selection"
}

prompt_media_type() {
	clear

	local media_sections=""
	[ -d "${BOOKS_PATH}" ] && media_sections="$media_sections Books\n"
	[ -d "${MOVIES_PATH}" ] && media_sections="$media_sections Films\n"
	[ -f "${games_csv_path}" ] && media_sections="$media_sections Games\n"
	[ -d "${SHOWS_PATH}" ] && media_sections="$media_sections Television"
	if [ -z "$media_sections" ]; then
		echo "No valid media paths found, check your configuration."
		exit 1
	fi

	local type_selection
	type_selection=$(fzf_prompt "$media_sections")

	case "$type_selection" in
	Books) prompt_books ;;
	Films) prompt_films ;;
	Games) prompt_runner ;;
	Television) prompt_tv ;;
	*)
		kitty icat --clear
		clear
		exit 0
		;;
	esac
}

prompt_books() {
	local finished="0"
	while [ $finished == "0" ]; do
		local book_files
		book_files=$(find "$BOOKS_PATH" -type f \( -name "*.epub" -o -name "*.pdf" \) | sort)
		local book_selection
		book_selection=$(fzf_prompt "$book_files")
		if [ -z "$book_selection" ]; then
			prompt_media_type
		else
			zathura "$BOOKS_PATH/$book_selection".* 2>/dev/null &
		fi
	done
}

prompt_films() {
	local finished="0"
	while [ $finished == "0" ]; do
		local film_files
		film_files=$(find "$MOVIES_PATH" -type f \( -name "*.mkv" -o -name "*.mp4" \) | sort)
		local film_selection
		film_selection=$(fzf_prompt "$film_files")
		if [ -z "$film_selection" ]; then
			prompt_media_type
		else
			mpv "$MOVIES_PATH/$film_selection".* --fullscreen >/dev/null 2>&1 &
		fi
	done
}

prompt_runner() {
	local finished="0"
	while [ $finished == "0" ]; do
		local available_runners
		available_runners=$(get_available_runners)

		local available_runners_list
		available_runners_list="All\n$available_runners"

		local runner_selection
		runner_selection=$(fzf_prompt "$available_runners_list")
		if [ -z "$runner_selection" ]; then
			clear
			prompt_media_type
		fi

		if [ "$runner_selection" == "All" ]; then
			runner_selection=""
		fi

		runner_games=$(get_matching_games)
		prompt_game "$runner_games"
		clear
		break
	done
}

prompt_game() {
	local runner_games="$1"
	local finished="0"
	while [ $finished == "0" ]; do
		local game_selection
		game_selection=$(fzf_prompt "$runner_games")
		if [ -z "$game_selection" ]; then
			prompt_runner
		else
			local runner
			runner=$(awk 'BEGIN { FS = ";" } /'"$game_selection"'/ { print $2 }' "$games_csv_path")
			local game_id
			game_id=$(awk 'BEGIN { FS = ";" } /'"$game_selection"'/ { print $3 }' "$games_csv_path")
			launch_game "$runner" "$game_id"
		fi
	done
}

prompt_tv() {
	clear
	local shows
	shows=$(find "$SHOWS_PATH" -mindepth 1 -maxdepth 1 -type d | sort | sed "s|$SHOWS_PATH/||")
	local show_selection
	show_selection=$(fzf_prompt "$shows")

	if [ -z "$show_selection" ]; then
		prompt_media_type
	else
		prompt_season "$show_selection"
	fi
}

prompt_season() {
	clear
	local show_selection="$1"
	local seasons
	seasons=$(find "$SHOWS_PATH/$show_selection" -mindepth 1 -maxdepth 1 -type d | sort | sed "s|$SHOWS_PATH/$show_selection/||")
	local season_selection
	season_selection=$(fzf_prompt "$seasons" "$show_selection")
	if [ -z "$season_selection" ]; then
		prompt_tv
	else
		prompt_episode "$show_selection" "$season_selection"
	fi
}

prompt_episode() {
	local show_selection="$1"
	local season_selection="$2"
	local finished="0"
	while [ $finished == "0" ]; do
		clear
		local episode_files
		episode_files=$(find "$SHOWS_PATH/$show_selection/$season_selection" -type f \( -name "*.mkv" -o -name "*.mp4" \) | sort)
		local episode_selection
		episode_selection=$(fzf_prompt "$episode_files" "$show_selection")
		if [ -z "$episode_selection" ]; then
			prompt_season "$show_selection"
		else
			mpv "$SHOWS_PATH/$show_selection/$season_selection/$episode_selection".* --fullscreen >/dev/null 2>&1 &
		fi
	done
}

enumerate_runners() {
	case $runner in
	BlastEm) [ -d "$MD_ROMS" ] && flatpak list | grep "com.retrodev.blastem" ;;
	bsnes) [ -d "$SNES_ROMS" ] && flatpak list | grep "dev.bsnes.bsnes" ;;
	DeSmuME) [ -d "$DS_ROMS" ] && flatpak list | grep "org.desmume.DeSmuME" ;;
	Dolphin) [ -d "$GAMECUBE_WII_ROMS" ] && flatpak list | grep "org.DolphinEmu.dolphin-emu" ;;
	Flycast) [ -d "$DREAMCAST_ROMS" ] && flatpak list | grep "org.flycast.Flycast" ;;
	Heroic) command -v heroic ;;
	Lutris) command -v lutris ;;
	mGBA) [ -d "$GBA_ROMS" ] && flatpak list | grep "io.mgba.mGBA" ;;
	Nestopia) [ -d "$NES_ROMS" ] && flatpak list | grep "ca._0ldsk00l.Nestopia" ;;
	PCSX2) [ -d "$PS2_ROMS" ] && flatpak list | grep "net.pcsx2.PCSX2" ;;
	PPSSPP) [ -d "$PSP_ROMS" ] && flatpak list | grep "org.ppsspp.PPSSPP" ;;
	RPCS3) [ -d "$PS3_ROMS" ] && flatpak list | grep "net.rpcs3.RPCS3" ;;
	Steam) command -v steam ;;
	*)
		echo "Error: Invalid Runner"
		exit 1
		;;
	esac
}

get_available_runners() {
	local unavailable_runners=""
	for runner in $(echo -e "$SUPPORTED_RUNNERS"); do
		if [ ! $(enumerate_runners "$runner") ]; then
			local unavailable_runners="$unavailable_runners$runner"
		fi
	done

	local available_runners=""
	for runner in $(echo -e "$SUPPORTED_RUNNERS"); do
		if [ ! "$unavailable_runners" =~ "$runner" ]; then
			local available_runners
			available_runners="$available_runners$runner\n"
		fi
	done

	available_runners=$(echo -e "$available_runners" | sed -e '$!b' -e '/^\n*$/d')

	echo "$available_runners"
}

get_matching_games() {
	local runner_games
	runner_games=$(awk -v filter="$runner_selection" -v available_runners="$available_runners" 'BEGIN { FS = ";" } {
		if (NR == 1) { next }
		if (filter == "") {
			if (index(available_runners, $2) > 0) {
				print $1;
			}
		}
		else {
			split(filter, runners, /\n/);
			for (i in runners) {
				if ($2 == runners[i]) {
				print $1;
				}
			}
		}
	}' "$games_csv_path")

	echo "$runner_games"
}

launch_game() {
	local runner="$1"
	local game_id="$2"
	case $runner in
	BlastEm)
		flatpak run com.retrodev.blastem "$MD_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	bsnes)
		flatpak run dev.bsnes.bsnes "$SNES_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	DeSmuME)
		flatpak run org.desmume.DeSmuME "$DS_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	Dolphin)
		flatpak run org.DolphinEmu.dolphin-emu "$GAMECUBE_WII_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	Flycast)
		flatpak run org.flycast.Flycast "$DREAMCAST_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	Heroic)
		xdg-open heroic://launch/legendary/"$game_id" >/dev/null 2>&1 &
		;;
	Lutris)
		env LUTRIS_SKIP_INIT=1 lutris "lutris:rungame_id/$game_id" >/dev/null 2>&1 &
		;;
	mGBA)
		flatpak run io.mgba.mGBA "$GBA_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	Nestopia)
		flatpak run ca._0ldsk00l.Nestopia "$NES_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	PCSX2)
		flatpak run net.pcsx2.PCSX2 "$PS2_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	PPSSPP)
		flatpak run org.ppsspp.PPSSPP "$PSP_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	RPCS3)
		flatpak run net.rpcs3.RPCS3 "$PS3_ROMS/$game_id" >/dev/null 2>&1 &
		;;
	Steam)
		steam steam://rungame_id/"$game_id" >/dev/null 2>&1 &
		;;
	*)
		echo "The runner $runner is not currently supported"
		;;
	esac
}

main "$@"
